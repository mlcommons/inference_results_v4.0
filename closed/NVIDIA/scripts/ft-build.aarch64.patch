diff --git a/3rdparty/fp8_qgmma_1x1/conv1x1_interface.hpp b/3rdparty/fp8_qgmma_1x1/conv1x1_interface.hpp
index 1308bfc..b98e83e 100755
--- a/3rdparty/fp8_qgmma_1x1/conv1x1_interface.hpp
+++ b/3rdparty/fp8_qgmma_1x1/conv1x1_interface.hpp
@@ -1,6 +1,8 @@
 #ifndef CONV1x1_INTERFACE_HPP_
 #define CONV1x1_INTERFACE_HPP_
 
+#include <stdint.h>
+
 class Conv1x1Interface 
 {
 public:
diff --git a/3rdparty/fp8_qgmma_1x1/fp8_gemm_1x1.h b/3rdparty/fp8_qgmma_1x1/fp8_gemm_1x1.h
index f43f639..054b07b 100755
--- a/3rdparty/fp8_qgmma_1x1/fp8_gemm_1x1.h
+++ b/3rdparty/fp8_qgmma_1x1/fp8_gemm_1x1.h
@@ -19,7 +19,7 @@
 
 #include "sharedCubinLoader.h"
 #include "tile_profile.cuh"
-#include "utils.h"
+
 
 namespace fp8_gemm_1x1 {
 
diff --git a/3rdparty/fp8_qgmma_1x1/fp8_qgmma_1x1_utils.cu b/3rdparty/fp8_qgmma_1x1/fp8_qgmma_1x1_utils.cu
index 566fa78..9b8c4dc 100644
--- a/3rdparty/fp8_qgmma_1x1/fp8_qgmma_1x1_utils.cu
+++ b/3rdparty/fp8_qgmma_1x1/fp8_qgmma_1x1_utils.cu
@@ -18,20 +18,6 @@
 #error CUDART_VERSION Undefined!
 #endif
 
-#define gpuErrChk(ans)                        \
-    {                                         \
-        gpuAssert((ans), __FILE__, __LINE__); \
-    }
-inline void gpuAssert(cudaError_t code, const char *file, int line, bool abort = true)
-{
-    if (code != cudaSuccess)
-    {
-        fprintf(stderr, "GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);
-        if (abort)
-            exit(code);
-    }
-}
-
 #include <vector>
 
 #include "conv1x1.cuh"
diff --git a/3rdparty/fp8_qgmma_1x1/sharedCubinLoader.h b/3rdparty/fp8_qgmma_1x1/sharedCubinLoader.h
index 97eeb80..d873ce2 100755
--- a/3rdparty/fp8_qgmma_1x1/sharedCubinLoader.h
+++ b/3rdparty/fp8_qgmma_1x1/sharedCubinLoader.h
@@ -25,6 +25,7 @@
 #include <stdint.h>
 #include <unordered_map>
 #include <vector>
+#include "utils.h"
 
 template <typename TKernelMeta, typename TKernelParam>
 class TSharedCubinKernel
@@ -173,7 +174,11 @@ private:
 
     inline uint64_t hashID(int32_t sm) const
     {
-        return (uint64_t)sm;
+        // Concatenate sm with deviceID to support Multi-GPU cubin loading
+        // Bottom 32 bits are for SM, top 32 bits for deviceID
+        int32_t deviceID{0};
+        cudaGetDevice(&deviceID);
+        return (uint64_t) deviceID << 32 | (uint64_t)sm;
     }
 
     std::unordered_map<uint64_t, std::unique_ptr<TKernelList> const> mKernels;
diff --git a/3rdparty/fp8_qgmma_1x1/utils.h b/3rdparty/fp8_qgmma_1x1/utils.h
index 5818933..6d55ea3 100755
--- a/3rdparty/fp8_qgmma_1x1/utils.h
+++ b/3rdparty/fp8_qgmma_1x1/utils.h
@@ -5,7 +5,19 @@
 #include <stdlib.h>
 #include <assert.h>
 
-#define gpuErrChk(ans) { gpuAssert((ans), __FILE__, __LINE__); }
+#define gpuErrChk(ans)                        \
+    {                                         \
+        gpuAssert((ans), __FILE__, __LINE__); \
+    }
+inline void gpuAssert(cudaError_t code, const char *file, int line, bool abort = true)
+{
+    if (code != cudaSuccess)
+    {
+        fprintf(stderr, "GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);
+        if (abort)
+            exit(code);
+    }
+}
 
 typedef struct alignas(64) {
     uint64_t data[8];
diff --git a/src/fastertransformer/kernels/decoder_masked_multihead_attention_utils.h b/src/fastertransformer/kernels/decoder_masked_multihead_attention_utils.h
index 075e61b..88b547e 100644
--- a/src/fastertransformer/kernels/decoder_masked_multihead_attention_utils.h
+++ b/src/fastertransformer/kernels/decoder_masked_multihead_attention_utils.h
@@ -20,6 +20,8 @@
 #include "src/fastertransformer/utils/cuda_fp8_utils.h"
 #include "src/fastertransformer/utils/cuda_type_utils.cuh"
 #include <stdint.h>
+#include <stdio.h>
+
 
 using namespace fastertransformer;
 
diff --git a/src/fastertransformer/utils/allocator.h b/src/fastertransformer/utils/allocator.h
index d7a1421..3ce774e 100644
--- a/src/fastertransformer/utils/allocator.h
+++ b/src/fastertransformer/utils/allocator.h
@@ -85,13 +85,6 @@ public:
                 free((void**)(&void_ptr), is_host);
                 return malloc(size, is_set_zero, is_host);
             }
-#if !defined(CUDA_MEMORY_POOL_DISABLED)
-            else if (realloc_type == ReallocType::DECREASE) {
-                FT_LOG_DEBUG("ReMalloc the buffer %p to release unused memory to memory pools.", void_ptr);
-                free((void**)(&void_ptr), is_host);
-                return malloc(size, is_set_zero, is_host);
-            }
-#endif
             else {
                 FT_LOG_DEBUG("Reuse original buffer %p with size %d and do nothing for reMalloc.", void_ptr, size);
                 if (is_set_zero) {
diff --git a/src/fastertransformer/utils/cuda_fp8_utils.h b/src/fastertransformer/utils/cuda_fp8_utils.h
index 27e62fe..765d9b2 100644
--- a/src/fastertransformer/utils/cuda_fp8_utils.h
+++ b/src/fastertransformer/utils/cuda_fp8_utils.h
@@ -20,6 +20,7 @@
 #include <cuda_fp8.h>
 #include <cuda_runtime.h>
 #include <stdint.h>
+#include <stdio.h>
 
 // #define FP8_MHA
 #define FUSE_GEMM_ACT
