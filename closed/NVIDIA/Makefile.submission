# Copyright (c) 2024, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This Makefile includes all targets related to generating the directories required for a valid MLPerf Inference
# submission. These directories are:
#     - results/: Contains the result logs generated by Loadgen when a workload is run
#     - compliance/: Contains the result logs generated by Loadgen when a compliance test is run
#     - measurements/: Contains the Loadgen configurations for all the workloads


# ==================== INSTRUCTIONS ====================
# For a proper submission, read the documentation in documentation/submission_guide.md.
#
# For basic usage:
# 1. Make sure all of the workloads you want to submit have the required logs in build/logs. This includes:
#     - a valid performance run (that was run without --fast)
#     - a passing accuracy run
# 2. Run all audit tests
# ======================================================


include $(CURDIR)/Makefile.const


RESULTS_REPO_SSH_URL := ssh://git@gitlab-master.nvidia.com:12051/mlpinf/mlperf-inference-results.git
RESULTS_REPO_HTTPS_URL := https://gitlab-master.nvidia.com/mlpinf/mlperf-inference-results/-/tree/main/closed/NVIDIA

ARTIFACTS_DIR ?= $(BUILD_DIR)/artifacts
ARTIFACTS_STAGING ?= $(BUILD_DIR)/submission-staging
ARTIFACTS_BRANCH ?= push-staging-$(UNAME)-$(TIMESTAMP)

COMPRESSED_FULL_LOGS = build/artifacts/$(ARTIFACTS_BRANCH).gz
SWIFTSTACK_ASSET_PATH ?= manual/$(ARTIFACTS_BRANCH).gz

TARBALL_NAME=mlperf-inference-${SUBMITTER}-submission.tar.gz
SHA1_FILE_NAME=mlperf-inference-${SUBMITTER}-submission.sha1

# Clone the MLPINF results repo to build/artifacts. Fallback to HTTPS if git over SSH fails.
# Note: should be executed outside container
.PHONY: clone_artifacts_repo
clone_artifacts_repo:
	@if [ ! -d $(ARTIFACTS_DIR) ]; then \
		$(GIT_BIN) clone $(RESULTS_REPO_SSH_URL) $(ARTIFACTS_DIR) || $(GIT_BIN) clone $(RESULTS_REPO_HTTPS_URL) $(ARTIFACTS_DIR); \
	fi


# Pull the remote to update the results repo. Depends on the existence of the results repo.
# Note: should be executed outside container
.PHONY: pull_artifacts_repo
pull_artifacts_repo: clone_artifacts_repo
	@$(GIT_BIN) -C $(ARTIFACTS_DIR) pull


# Purge the results repo
.PHONY: purge_artifacts_repo
purge_artifacts_repo:
	@if [ -d $(ARTIFACTS_DIR) ]; then \
		rm -rf $(ARTIFACTS_DIR); \
	fi


.PHONY: generate_conf_files
generate_conf_files:
	@$(PYTHON3_CMD) -m scripts.create_config_files


# Generate a raw results directory in build/full_results from LoadGen logs in build/logs
.PHONY: stage_results
stage_results:
	@$(PYTHON3_CMD) -m scripts.update_results $(RUN_ARGS)
	@mkdir -p $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/measurements
	@cp -R $(BUILD_DIR)/loadgen-configs/* $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/measurements/


.PHONY: update_results
update_results: stage_results
	@echo "'make update_results' is deprecated. Use 'make stage_results' instead."


.PHONY: stage_compliance
stage_compliance:
	@$(PYTHON3_CMD) -m scripts.update_results --staging_dir $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/compliance --log_dir build/compliance_logs --ignore_power --stage_compliance


.PHONY: update_compliance
update_compliance: stage_compliance
	@echo "'make update_compliance' is deprecated. Use 'make stage_compliance' instead."


.PHONY: truncate_results
truncate_results:
	@rm -rf build/full_results
	@$(PYTHON3_CMD) build/inference/tools/submission/truncate_accuracy_log.py --input $(ARTIFACTS_STAGING) --backup closed/$(SUBMITTER)/build/full_results --submitter $(SUBMITTER)
	@mv $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/build/full_results build/
	@echo "Full accuracy logs stored in build/full_results/. Truncated results stored in $(ARTIFACTS_STAGING)/results/."


# checkout the latest results repo and run through submission_checker.py, 
# update tracker sheet based on checker's result
.PHONY: summarize_results
summarize_results: pull_artifacts_repo export_submission
	$(MAKE) -f Makefile.submission check_submission "RUN_ARGS=--csv $(ARTIFACTS_DIR)/closed/NVIDIA/results/out.csv"
	@$(PYTHON3_CMD) -m build.artifacts.closed.NVIDIA.scripts.results_analysis.summarize_results $(RUN_ARGS)


.PHONY: check_submission_staging
check_submission_staging:
	@mkdir -p $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)
	-@rm -rf $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/build
	-@rm -rf build/tmp
	-@rsync -rv --include '*/' --include 'metadata.json' --exclude '*' --prune-empty-dirs --remove-source-files $(ARTIFACTS_STAGING)/ build/tmp/
	-@ln -s $(PROJECT_ROOT)/code $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/code
	-@ln -s $(PROJECT_ROOT)/systems $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/systems
	-@$(PYTHON3_CMD) $(BUILD_DIR)/inference/tools/submission/submission_checker.py --input $(ARTIFACTS_STAGING) --submitter $(SUBMITTER) 2>&1 | \
		tee $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/results/submission_checker_log.txt
	@rm -f $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/code
	@rm -f $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/systems
	-@rsync -rv --include '*/' --include 'metadata.json' --exclude '*' --prune-empty-dirs --remove-source-files build/tmp/ $(ARTIFACTS_STAGING)/
	-@rm -rf build/tmp


results:
ifneq ($(EXTERNAL_USER), 0)
	cp -R $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/results .
else
	cp -R $(ARTIFACTS_DIR)/closed/$(SUBMITTER)/results .
endif


compliance:
ifneq ($(EXTERNAL_USER), 0)
	cp -R $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/compliance .
else
	cp -R $(ARTIFACTS_DIR)/closed/$(SUBMITTER)/compliance .
endif


measurements:
ifneq ($(EXTERNAL_USER), 0)
	cp -R $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/measurements .
else
	cp -R $(ARTIFACTS_DIR)/closed/$(SUBMITTER)/measurements .
endif


.PHONY: copy_results_artifacts
copy_results_artifacts: results compliance measurements


.PHONY: export_submission
export_submission:
	@echo "WARNING: This script cannot be executed from within the docker container."
	@echo "It must have access to the project root at ../../"
	@echo "Purging measurements/ results/ compliance/ in the current directory"
	@rm -rf measurements/ results/ compliance/
	@$(MAKE) -f Makefile.submission copy_results_artifacts
	@cd ../../ && rm -rf build/submission \
		&& $(PYTHON3_CMD) scripts/export_submission.py --divisions closed --export-to build/submission

# Please run "make export_submission" before run "make check_submission_fast"
.PHONY: check_submission_fast
check_submission_fast:
	@echo "WARNING: This script cannot be executed from within the docker container."
	@echo "It must have access to the project root at ../../"
	@$(MAKE) -f Makefile.build clone_loadgen
	cd ../../ \
		&& $(PYTHON3_CMD) closed/$(SUBMITTER)/build/inference/tools/submission/submission_checker.py --input build/submission --submitter $(SUBMITTER) $(RUN_ARGS) 2>&1 \
			| tee build/submission/closed/$(SUBMITTER)/results/submission_checker_log.txt


# Submission checker will by default check power.
.PHONY: check_submission
check_submission: check_submission_fast


.PHONY: copy_submission_staging
copy_submission_staging: clone_artifacts_repo
	@cd $(ARTIFACTS_DIR) \
		&& $(GIT_BIN) fetch \
		&& $(GIT_BIN) checkout main \
		&& $(GIT_BIN) pull \
		&& $(GIT_BIN) checkout -b $(ARTIFACTS_BRANCH)
	@rm -rf $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/code
	@rm -rf $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/systems
	@rm -rf $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/results/submission_checker_log.txt
	@echo "Copying compliance logs..." \
		&& cp -R $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/compliance $(ARTIFACTS_DIR)/closed/$(SUBMITTER) || /bin/true
	@echo "Copying result logs..." \
		&& cp -R $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/results $(ARTIFACTS_DIR)/closed/$(SUBMITTER)
	@echo "Copying measurements..." \
		&& cp -R $(ARTIFACTS_STAGING)/closed/$(SUBMITTER)/measurements $(ARTIFACTS_DIR)/closed/$(SUBMITTER)


.PHONY: push_submission_staging
push_submission_staging: copy_submission_staging
	@echo "Creating MR..."
	@cd $(ARTIFACTS_DIR) \
		&& $(GIT_BIN) add . \
		&& $(GIT_BIN) commit -m "Results update ($(ARTIFACTS_BRANCH))" \
		&& $(GIT_BIN) push \
			-o ci.skip \
			-o merge_request.create \
			-o merge_request.target=main \
			-o merge_request.title="Results update via MLPINF Pipeline: ${ARTIFACTS_BRANCH}" \
			-o merge_request.description="$(MR_DESCRIPTION)" \
			--set-upstream origin \
			$(ARTIFACTS_BRANCH)
	@rm -rf $(ARTIFACTS_STAGING)


.PHONY: pack_full_logs
pack_full_logs:
	@echo "Compressing full logs into $(COMPRESSED_FULL_LOGS) ..."
	@tar -czf  $(COMPRESSED_FULL_LOGS) build/full_results


.PHONY: push_full_logs
push_full_logs: pack_full_logs
	@echo "Pushing $(COMPRESSED_FULL_LOGS) to SwiftStack"
	@source ~/.bashrc && python3 -m scripts.internal.swiftstack.upload_asset -a $(SWIFTSTACK_ASSET_PATH) -f $(COMPRESSED_FULL_LOGS)


.PHONY: pack_submission
pack_submission:
	@cd ../../build/submission && \
		echo "Compressing submission artifacts into ../../build/submission/${TARBALL_NAME} ..." && \
		tar --exclude=".*" -czf ${TARBALL_NAME} * && \
		sha1sum ${TARBALL_NAME} | tee ${SHA1_FILE_NAME} && \
		echo "Submission tarball and SHA1 sum are generated in ../../build/submission!"
